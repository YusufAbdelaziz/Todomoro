{"version":3,"sources":["features/todo/TodoItem/todoItem.module.scss","features/todo/todosSlice.js","features/common components/Button.js","features/todo/TodoItem/TodoEditForm.js","features/todo/TodoItem/TodoItem.js","features/todo/TodoList.js","features/todo/Todo.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","pickRandomCompeletionIcon","icons","Math","floor","random","length","todosAdapter","createEntityAdapter","sortComparer","a","b","compareAsc","parseISO","date","initialState","getInitialState","todosSlice","createSlice","name","reducers","todoAdded","prepare","task","id","nanoid","payload","completetionEmoji","hasCompleted","Date","toISOString","reducer","state","action","addOne","todoUpdated","updateOne","todoRemoved","removeOne","actions","getSelectors","todos","selectTodoById","selectById","selectTodoIds","selectAll","selectIds","Button","tag","hoverColor","onClick","className","classNames","TodoEditForm","todo","setEditMode","useState","inputText","setInputText","dispatch","useDispatch","useEffect","document","addEventListener","captureKeyboardEvents","removeEventListener","type","value","onChange","e","target","saveTodoChange","key","changes","TodoItem","todoId","useSelector","hasEdited","console","log","htmlFor","styles","checked","stopPropagation","icon","faTrash","size","faPen","TodoList","todoIds","todoTransitions","useTransition","config","gentle","from","opacity","transform","enter","leave","keys","map","div","style","Todo","todoText","setTodoText","submitTodo","onSubmit","preventDefault","placeholder","App","configureStore","todosReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.420098dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"custom-container\":\"todoItem_custom-container__3oFcy\",\"checkmark\":\"todoItem_checkmark__3Pbp-\",\"icon\":\"todoItem_icon__Y473h\"};","import { createSlice, createEntityAdapter, nanoid } from '@reduxjs/toolkit';\r\nimport { parseISO } from 'date-fns';\r\nimport { compareAsc } from 'date-fns/esm';\r\n\r\nfunction pickRandomCompeletionIcon() {\r\n  const icons = [\r\n    '😎',\r\n    '🐱‍🏍',\r\n    '🐱‍💻',\r\n    '🐱‍👓',\r\n    '🐱‍🐉',\r\n    '🤩',\r\n    '🐱‍👤',\r\n    '💥',\r\n    '🦾',\r\n    '🤓',\r\n    '🙌',\r\n    '👏',\r\n  ];\r\n  return icons[Math.floor(Math.random(0) * icons.length)];\r\n}\r\n\r\n// Sort the todos depending on their addition date.\r\nconst todosAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => {\r\n    return compareAsc(parseISO(a.date), parseISO(b.date));\r\n  },\r\n});\r\n\r\nconst initialState = todosAdapter.getInitialState();\r\n\r\nconst todosSlice = createSlice({\r\n  initialState,\r\n  name: 'todos',\r\n  reducers: {\r\n    todoAdded: {\r\n      prepare(task) {\r\n        const id = nanoid();\r\n        return {\r\n          payload: {\r\n            task,\r\n            completetionEmoji: pickRandomCompeletionIcon(),\r\n            hasCompleted: false,\r\n            id,\r\n            date: new Date().toISOString(),\r\n          },\r\n        };\r\n      },\r\n      reducer(state, action) {\r\n        todosAdapter.addOne(state, action.payload);\r\n      },\r\n    },\r\n    todoUpdated: todosAdapter.updateOne,\r\n    todoRemoved: todosAdapter.removeOne,\r\n  },\r\n});\r\n\r\nexport const { todoAdded, todoUpdated, todoRemoved } = todosSlice.actions;\r\n\r\nexport default todosSlice.reducer;\r\n\r\nexport const {\r\n  selectById: selectTodoById,\r\n  selectAll: selectAllTodos,\r\n  selectIds: selectTodoIds,\r\n} = todosAdapter.getSelectors(state => state.todos);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nexport const Button = ({ tag, hoverColor, onClick }) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={classNames(\r\n        'bg-gray-400 bg-opacity-80',\r\n        'transition-all ease-out box-border',\r\n        'text-white',\r\n        `hover:bg-${hoverColor}-400 hover:bg-opacity-100 shadow-md`,\r\n        'px-5 py-1',\r\n        'rounded-full',\r\n        'focus:ring-1 focus:ring-opacity-30 focus:ring-black focus:outline-none'\r\n      )}\r\n    >\r\n      {tag}\r\n    </button>\r\n  );\r\n};\r\nButton.propTypes = {\r\n  tag: PropTypes.string,\r\n  hoverColor: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  onKeyDown: PropTypes.func,\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { useDispatch } from 'react-redux';\r\nimport { todoUpdated } from '../todosSlice';\r\nimport { Button } from '../../common components/Button';\r\n\r\nexport const TodoEditForm = ({ todo, setEditMode }) => {\r\n  const [inputText, setInputText] = useState(todo.task);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', captureKeyboardEvents);\r\n    return () => {\r\n      document.removeEventListener('keydown', captureKeyboardEvents);\r\n    };\r\n  }, [inputText]);\r\n\r\n  return (\r\n    <div className={classNames('flex flex-col w-full')}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputText}\r\n        className={classNames(\r\n          'ring-gray-400 ring-2 ring-opacity-50 px-2 py-1 rounded-full outline-none'\r\n        )}\r\n        onChange={e => {\r\n          setInputText(e.target.value);\r\n        }}\r\n      />\r\n      <div\r\n        id=\"buttons\"\r\n        className={classNames(\r\n          'flex flex-row-reverse self-end mt-4 mx-1 w-full md:w-6/12 lg:w-4/12 justify-between'\r\n        )}\r\n      >\r\n        <Button\r\n          tag=\"Close\"\r\n          hoverColor=\"red\"\r\n          onClick={() => setEditMode(false)}\r\n        />\r\n        <Button\r\n          tag=\"Save\"\r\n          hoverColor=\"green\"\r\n          onClick={() => saveTodoChange()}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  function captureKeyboardEvents(e) {\r\n    if (e.key === 'Enter') {\r\n      saveTodoChange();\r\n    } else if (e.key === 'Escape') {\r\n      setEditMode(false);\r\n    }\r\n  }\r\n  function saveTodoChange() {\r\n    dispatch(\r\n      todoUpdated({\r\n        id: todo.id,\r\n        changes: {\r\n          task: inputText,\r\n        },\r\n      })\r\n    );\r\n    setEditMode(false);\r\n  }\r\n};\r\nTodoEditForm.propTypes = {\r\n  todo: PropTypes.object,\r\n  setEditMode: PropTypes.func,\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectTodoById, todoUpdated, todoRemoved } from '../todosSlice';\r\nimport classNames from 'classnames';\r\nimport styles from './todoItem.module.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash, faPen } from '@fortawesome/free-solid-svg-icons';\r\nimport { TodoEditForm } from './TodoEditForm';\r\n\r\nexport const TodoItem = ({ todoId }) => {\r\n  const todo = useSelector(state => selectTodoById(state, todoId));\r\n  const dispatch = useDispatch();\r\n  const [hasEdited, setEditMode] = useState(false);\r\n  console.log('Todo', todo);\r\n  console.log('TodoId', todoId);\r\n  if (!todo) {\r\n    return <div className=\"h-0 w-0\"></div>;\r\n  }\r\n  return (\r\n    <div className=\"flex flex-row justify-between w-full\">\r\n      {hasEdited ? (\r\n        <TodoEditForm todo={todo} setEditMode={setEditMode} />\r\n      ) : (\r\n        <Fragment>\r\n          <div className=\"flex flex-row \">\r\n            <label\r\n              htmlFor={`checkbox ${todoId}`}\r\n              className={classNames(\r\n                { 'text-gray-700': !todo.hasCompleted },\r\n                { 'line-through text-gray-400': todo.hasCompleted },\r\n                styles['custom-container']\r\n              )}\r\n            >\r\n              {todo.task}\r\n\r\n              <input\r\n                type=\"checkbox\"\r\n                id={`checkbox ${todoId}`}\r\n                checked={todo.hasCompleted || false}\r\n                onChange={e => {\r\n                  e.stopPropagation();\r\n                  dispatch(\r\n                    todoUpdated({\r\n                      id: todoId,\r\n                      changes: { hasCompleted: !todo.hasCompleted },\r\n                    })\r\n                  );\r\n                }}\r\n              />\r\n\r\n              <span className={styles['checkmark']}></span>\r\n            </label>\r\n            {todo.hasCompleted ? (\r\n              <span className=\"self-center ml-2 text-md\">\r\n                {todo.completetionEmoji}\r\n              </span>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </div>\r\n          <div className=\"flex flex-row justify-between self-center w-14\">\r\n            <FontAwesomeIcon\r\n              onClick={() => dispatch(todoRemoved(todoId))}\r\n              icon={faTrash}\r\n              className={classNames(styles['icon'])}\r\n              size=\"1x\"\r\n            />\r\n            <FontAwesomeIcon\r\n              onClick={() => setEditMode(true)}\r\n              icon={faPen}\r\n              className={classNames(styles['icon'])}\r\n              size=\"1x\"\r\n            />\r\n          </div>\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nTodoItem.propTypes = {\r\n  todoId: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectTodoIds } from './todosSlice';\r\nimport { TodoItem } from './TodoItem/TodoItem';\r\nimport { useTransition, animated, config } from 'react-spring';\r\nimport classNames from 'classnames';\r\n\r\nexport const TodoList = () => {\r\n  const todoIds = useSelector(selectTodoIds);\r\n  console.log('TodoList is rendered');\r\n  const todoTransitions = useTransition(todoIds, {\r\n    config: config.gentle,\r\n    from: { opacity: 0, transform: 'translate3d(-25%, 0px, 0px)' },\r\n    enter: { opacity: 1, transform: 'translate3d(0%, 0px, 0px)' },\r\n    leave: { opacity: 0, transform: 'translate3d(25%, 0px, 0px)' },\r\n\r\n    keys: todoIds.map(id => id),\r\n  });\r\n\r\n  if (todoIds.length === 0) {\r\n    return (\r\n      <p className=\"pt-8 text-xl text-gray-300\">Start adding your todos !</p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-64 sm:w-1/2 lg:w-7/12\">\r\n      {todoTransitions((styles, todoId) => (\r\n        <animated.div\r\n          className={classNames(\r\n            ' rounded-md shadow-md ',\r\n            'flex flex-row justify-between',\r\n            'border-t-2 border-r-2 border-l-2 border-opacity-60',\r\n            'my-2 p-3'\r\n          )}\r\n          style={{\r\n            ...styles,\r\n          }}\r\n        >\r\n          <TodoItem todoId={todoId} />\r\n        </animated.div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { TodoList } from './TodoList';\r\nimport { todoAdded } from './todosSlice';\r\nimport classNames from 'classnames';\r\n\r\nexport const Todo = () => {\r\n  const [todoText, setTodoText] = useState('');\r\n  const dispatch = useDispatch();\r\n  const submitTodo = () => {\r\n    dispatch(todoAdded(todoText));\r\n    setTodoText('');\r\n  };\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center\">\r\n      <h1 className=\"font-semibold text-2xl font-sans text-gray-400\">\r\n        My To-Dos\r\n      </h1>\r\n      <div\r\n        className={classNames(\r\n          'my-4 container w-5/12 md:w-1/2',\r\n          'flex items-center flex-col md:flex-row md:justify-evenly'\r\n        )}\r\n      >\r\n        <form\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            if (todoText) submitTodo();\r\n          }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            value={todoText}\r\n            placeholder=\"Add your todo here...\"\r\n            className={classNames(\r\n              'px-4 shadow-md',\r\n              'transition-all',\r\n              'mb-4 md:mb-0',\r\n              'py-1',\r\n              'focus:ring-gray-400 focus:shadow-none focus:border-transparent focus:ring-1 focus:outline-none',\r\n              'w-72 lg:w-80',\r\n              'rounded-full',\r\n              'outline-none'\r\n            )}\r\n            onChange={e => setTodoText(e.target.value)}\r\n          />\r\n        </form>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            if (todoText) submitTodo();\r\n          }}\r\n          className={classNames(\r\n            'bg-gray-400 bg-opacity-80',\r\n            'transition-all ease-out',\r\n            'text-white',\r\n            'hover:bg-gray-400 hover:bg-opacity-100 shadow-md',\r\n            'px-5 py-1',\r\n            'rounded-full',\r\n            'focus:ring-1 focus:ring-opacity-30 focus:ring-black focus:outline-none'\r\n          )}\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n      <TodoList />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './index.css';\r\nimport { Todo } from './features/todo/Todo';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container my-5 mx-auto\">\r\n      <Todo />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport todosReducer from '../features/todo/todosSlice';\r\nexport default configureStore({\r\n  reducer: {\r\n    todos: todosReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}